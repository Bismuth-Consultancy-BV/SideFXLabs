<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="labs::voxelmesh::3.0" label="Labs Voxel Mesh" icon="$SIDEFXLABS/help/icons/voxel_mesh_alt.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
soptoolutils.genericTool(kwargs, 'remeshgrid', exact_node_type=False)
]]></script>
  </tool>

  <tool name="labs::color_adjustment::1.0" label="Labs Color Adjustment" icon="SOP_attribadjustcolor">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'attribadjustcolor', exact_node_type=False)
node.setParms({"adjustvalue": 0, "enable_cc": 1, "enable_postprocess": 1, "dobrightness":1, "docontrast":1, "dosat":1, "dogamma":1})
]]></script>
  </tool>

  <tool name="labs::color_gradient::1.0" label="Labs Color Gradient" icon="SOP_attribadjustcolor">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'attribadjustcolor', exact_node_type=False)
node.setParms({"valuetype": "bbox", "bounddir": 1})
node.parm("colorramp").set(hou.Ramp((hou.rampBasis.Linear, hou.rampBasis.Linear), (0, 1), ((0.0, 0.0, 0.0), (1.0, 1.0, 1.0))))
]]></script>
  </tool>

  <tool name="labs::rokoko_mocap::1.0" label="Labs Rokoko Mocap" icon="SOP_kinefx-mocapstream">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'kinefx::mocapstream', exact_node_type=False)
node.setParms({"device": "rokoko"})
]]></script>
  </tool>

  <tool name="labs::neuron_mocap::1.0" label="Labs Neuron Mocap" icon="SOP_kinefx-mocapstream">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'kinefx::mocapstream', exact_node_type=False)
node.setParms({"device": "neuron"})
]]></script>
  </tool>

  <tool name="labs::multi_file::1.0" label="Labs Multi File" icon="SOP_file">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'filemerge::2.0', exact_node_type=False)
node.setParms({"enablerange": 0})
]]></script>
  </tool>

  <tool name="labs::curve_sweep::1.0" label="Labs Curve Sweep" icon="SOP_sweep-2.0">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'sweep', exact_node_type=False)
node.setParms({"surfaceshape": "tube", "cols":32, "computeuvs":1, "applyscale":1, "endcaptype":"grid", "capscale":0.0, "capdivs":1})
]]></script>
  </tool>

  <tool name="labs::calculate_occlusion::3.0" label="Labs Calculate Occlusion" icon="SOP_maskbyfeature">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'maskbyfeature', exact_node_type=False)
node.setParms({"enabledirection": 0, "castshadows":0, "enableao":1, "aobluriterations":30, "combinedmaskattrib":"Cd"})
]]></script>
  </tool>

  <tool name="labs::motion_vectors::1.0" label="Labs Motion Vectors" icon="$SIDEFXLABS/help/icons/texture_sheet.svg">
    <toolMenuContext name="viewer">
      <contextNetType>ROP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>ROP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import drivertoolutils
node = drivertoolutils.genericTool(kwargs, 'labs::flipbook_textures', exact_node_type=False)
]]></script>
  </tool>

  <tool name="labs::delete_file::1.0" label="Delete File" icon="TOP_fileremove">
    <toolMenuContext name="viewer">
      <contextNetType>TOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>TOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import drivertoolutils
node = drivertoolutils.genericTool(kwargs, 'fileremove', exact_node_type=False)
]]></script>
  </tool>

  <tool name="labs::remove_unconnected_points::1.0" label="Remove Unconnected Points" icon="SOP_add">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'add', exact_node_type=False)
node.setParms({'remove': 1})
node.setName('remove_unconnected_points1', True)
]]></script>
  </tool>

  <tool name="labs::remove_inline_points::1.0" label="Remove Inline Points" icon="SOP_facet">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'facet', exact_node_type=False)
node.setParms({'inline': 1})
node.setName('remove_inline_points1', True)
]]></script>
  </tool>

  <tool name="labs::remove_degenerate::1.0" label="Remove Degenerate" icon="SOP_facet">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'facet', exact_node_type=False)
node.setParms({'remove': 1})
node.setName('remove_degenerate1', True)
]]></script>
  </tool>

  <tool name="labs::remove_shared_edges::1.0" label="Remove Shared Edges" icon="SOP_divide">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'divide', exact_node_type=False)
node.setParms({'convex':0, 'removesh': 1})
node.setName('remove_shared_edges1', True)
]]></script>
  </tool>

  <tool name="labs::triangulate" label="Triangulate" icon="SOP_divide">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'divide', exact_node_type=False)
node.setName('triangulate1', True)
]]></script>
  </tool>

  <tool name="labs::tangent::1.0" label="Tangent" icon="SOP_polyframe">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'polyframe', exact_node_type=False)
node.setParms({"style": "mikkt", "tangentvon": 1})
node.setName('tangent1', True)
]]></script>
  </tool>

  <tool name="labs::compute_dual_polygon::1.0" label="Compute Dual Polygon" icon="SOP_divide">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'divide', exact_node_type=False)
node.setParms({'convex': 0, 'dual': 1})
node.setName('compute_dual_polygon1', True)
]]></script>
  </tool>

  <tool name="labs::remove_all_faces::1.0" label="Remove All Faces" icon="SOP_convertline">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'labs::edge_group_to_polylines::1.0', exact_node_type=False)
node.setParms({'edgegroup': '*'})
node.setName('remove_all_faces1', True)
]]></script>
  </tool>

  <tool name="labs::transform_from_centroid::1.0" label="Transform from Centroid" icon="SOP_xform">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'xform', exact_node_type=False)
node.setParmExpressions({'px': 'centroid(0, D_X)', 'py': 'centroid(0, D_Y)', 'pz': 'centroid(0, D_Z)'})
node.setName('transform_from_centroid1', True)
]]></script>
  </tool>

  <tool name="labs::tree_pivot_painter::1.0" label="Tree PivotPainter" icon="$SIDEFXLABS/help/icons/sidefx_labs_default.svg">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils
node = soptoolutils.genericTool(kwargs, 'labs::tree_hierarchy::1.0', exact_node_type=False)
]]></script>
  </tool>
  
    <tool icon="$SIDEFXLABS/help/icons/sidefx_labs_default.svg" label="Compilable Segments" name="labs::compilable_connectivity_and_segmentation::1.0">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import soptoolutils

# The main node to place when dropping down this alias
node = soptoolutils.genericTool(kwargs, 'labs::connectivity_and_segmentation::1.0', exact_node_type=False)

# Gets the parent of the placed node to places sequential nodes in the series
parent_node = node.parent()

# Sequential nodes initialization
compile_begin = parent_node.createNode('compile_begin')
for_each_begin = parent_node.createNode('block_begin')
for_each_end = parent_node.createNode('block_end')
compile_end = parent_node.createNode('compile_end')
node_list = [node, compile_begin, for_each_begin, for_each_end, compile_end]

# Sets node inputs based on the node list order above
for i in range(1, 5):
    node_list[i].setInput(0, node_list[i-1], 0)

# Names first node to alias name and set for each nodes to familiar names
node.setName('compilable_segments', True)
for_each_begin.setName('foreach_begin1', True)
for_each_end.setName('foreach_end1', True)

# Sets default parameters
compile_begin.setParms({'blockpath': "../" + compile_end.name()})
for_each_begin.setParms({'blockpath': "../" + for_each_end.name(), 'method': 1})
for_each_end.setParms({'itermethod': 1, 'method': 1, 'class': 0, 'attrib': "segment"})
for_each_end.setParms({'blockpath': "../" + for_each_begin.name()})
for_each_end.setParms({'templatepath': "../" + for_each_begin.name()})
for_each_end.setParms({'multithread': 1})

# Sets compile blocks to familiar yellow color
compile_begin.setColor(hou.Color(0.75, 0.75, 0))
compile_end.setColor(hou.Color(0.75, 0.75, 0))

# Layouts nodes properly, giving the for each block more space for work area
parent_node.layoutChildren(node_list)
for_each_end.setPosition(for_each_begin.position() + hou.Vector2(0, -2))
compile_end.setPosition(for_each_end.position() + hou.Vector2(0, -1))
]]>
    </script>
  </tool>
</shelfDocument>
